plugins {
  id 'idea'
  id 'org.springframework.boot' version '2.3.0.RELEASE'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.unbroken-dome.test-sets' version '3.0.1'
  id 'com.avast.gradle.docker-compose' version '0.13.4'
}

ext {
   set('springCloudVersion', "Hoxton.SR4")
}

allprojects {
  repositories {
    mavenCentral()
  }

  apply {
    plugin 'idea'
    plugin 'com.avast.gradle.docker-compose'
  }

  // Default plugin configuration for all subprojects
  dockerCompose {
    useComposeFiles = [ 'docker-compose.yml']
    waitForTcpPorts = true
    captureContainersOutput = true
  }

  version = '0.0.1-SNAPSHOT'
}

def springBootProjects = [
  project(":cloud-config-server"),
  project(":cloud-config-client")
]

springBootProjects.each { springBootProject ->
  configure(springBootProject) {
    println("Configuring $name as a Spring Boot project")

    apply {
      plugin 'java'
      plugin 'org.springframework.boot'
      plugin 'io.spring.dependency-management'
      plugin 'org.unbroken-dome.test-sets'
    }

    group = "com.daecabhir"
    sourceCompatibility = "11"

    dependencies {
      implementation 'org.springframework.boot:spring-boot-starter-actuator'
      implementation 'org.springframework.boot:spring-boot-starter-web'
      developmentOnly 'org.springframework.boot:spring-boot-devtools'
      testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
      }
    }

    dependencyManagement {
      imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
      }
    }

    tasks {
      test {
        useJUnitPlatform()
      }
    }

    composeUp {
      dependsOn bootJar
    }

    bootRun {
      doLast {
        dockerCompose.composeDown(bootRun)
      }
    }

    dockerCompose {
      bootRun {
        useComposeFiles = [ 'docker-compose.dev.yml' ]
        isRequiredBy project.tasks.bootRun
      }
    }
  }
}
